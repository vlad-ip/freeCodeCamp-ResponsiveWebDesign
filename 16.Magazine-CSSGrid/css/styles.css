    /*todo FONTS to use in this page:
    
    font-family: 'Anton',
    sans-serif;

    font-family: 'Baskervville',
    serif;

    font-family: 'Raleway',
    sans-serif; */

    *,
    ::before,
    ::after {
        margin: 0;
        padding: 0;
    }

    html {
        box-sizing: border-box;
        font-size: 62.5%;
        /*! the browser default is 16px => with this we set the font-size to 10px. This will make it easier to work with "rem" as 2rem will be 20px */
    }

    body {
        font-family: 'Baskervville', serif;
        color: linen;
        background-color: rgb(20, 30, 40);
    }

    h1 {
        font-family: 'Anton', sans-serif;
    }

    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Raleway', sans-serif;
    }

    a {
        text-decoration: none;
        color: linen;
    }

    main {
        display: grid;

        /*! grid-template-columns: 1fr 94rem 1fr;
         This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container. */

        grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
        /*! by using the "minmax()" function we make the columns responsive. This function takes 2 arguments, in this order, the minimum and maximum value. */

        row-gap: 3rem;
        /*! this adds space between the rows in the grid layout */
    }

    .heading {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        /*! The "repeat()" function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide. Here, by using "repeat (2, 1fr)" we create 2 columns of equal width. */

        grid-column: 2 / 3;
        /*! The "grid-column" property is a shorthand for "grid-column-start" and "grid-column-end" and it tells the Grid Item which grid column to start and end at. There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column. */

        row-gap: 1.5rem;
    }

    .hero {
        grid-column: 1 / -1;
        /*! This tells the element to span from the first to last column, thus to span the full width of the grid. */

        position: relative;
    }

    img {
        width: 100%;
        object-fit: cover;
        /*! The "object-fit" property tells the browser how to position the element within its container. In this case, "cover" will set the image to fill the container, cropping as needed to avoid changing the aspect ratio. */
    }

    .hero-title {
        font-size: 8rem;
        color: orangered;
        text-align: center;
    }

    .hero-subtitle {
        font-size: 2.4rem;
        color: orangered;
        text-align: center;
    }

    .author {
        font-size: 2rem;
        font-family: 'Raleway', sans-serif;
    }

    .author-name a:hover {
        background-color: #306203;

    }

    .publish-date {
        color: rgba(255, 255, 255, 0.5);
    }

    .social-icons {
        font-size: 3rem;

        display: grid;

        grid-template-columns: repeat(5, 1fr);
        /*! we create thus 5 columns so that we will accomodate the 5 social-icons in a single row. The default settings for CSS Grid will create additional rows as needed, unlike Flexbox. */

        grid-auto-flow: column;
        /*! If you would want to add more social icons, but keep them on the same row, you would need to update "grid-template-columns" to create additional columns. As an alternative, you can use the "grid-auto-flow" property. This property takes either "row" or "column" as the first value, with an optional second value of "dense". "grid-auto-flow" uses an auto-placement algorithm to adjust the grid layout. Setting it to "column" will tell the algorithm to create new columns for content as needed. The "dense" value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order. */

        grid-auto-columns: 1fr;
        /*! The auto-placement algorithm used by the "grid-auto-flow" property will kick in when we add a new icon element. However, the algorithm defaults the new column width to be "auto", which will not match the current columns. This behavior can be overridden with the "grid-auto-columns" property. */

        align-items: center;
        /*! Much like Flexbox, with CSS Grid you can align the content of Grid Items with "align-items" and "justify-items". "align-items" will align child elements along the column axis, and "justify-items" will align child elements along the row axis. */

    }

    .text {
        font-size: 1.8rem;
        letter-spacing: 0.6px;
        grid-column: 2 / 3;

        column-width: 25rem;
        /*! The ".text" element is not a CSS Grid, but you can create columns within an element like <div> or <section> without using Grid by using the "column-width" property, which is a flexible property. Think of column-width as a minimum width suggestion for the browser. Once the browser cannot fit at least two columns at your specified width then the columns will stop and drop into a single column. But if on the other hand the browser could fit three columns at the specified width, it will do so. */

        text-align: justify;
        /*! Magazines often use justified text in their printed content to structure their layout and control the flow of their content. While this works in printed form, justified text on websites can be an accessibility concern, for example presenting challenges for folks with dyslexia. */
    }

    .first-paragraph::first-letter {
        color: orangered;

        font-size: 6rem;
        /*! When the "first-letter" became Big, it forced the text below to shift down. In order to move it back into its normal position make the "first-letter" float. */

        float: left;
        margin-right: 1rem;
    }

    hr {
        margin: 1.5rem 0;
        border: 1px solid rgba(120, 120, 120, 0.6);
        /*! this is how to give the hr a thickness and a color */
    }

    blockquote {
        break-inside: avoid;
        /*! "avoid" is equivalent with "avoid-column", "avoid-region" and "avoid-page" */
    }

    .quote {
        color: #00beef;
        font-size: 2.4rem;
        text-align: center;
        font-family: 'Raleway', sans-serif;
    }

    .quote::before {
        content: '" ';
        /*! put quote before - see the space after quote! */
    }

    .quote::after {
        content: ' "';
        /*! put quote */
    }

    .text-with-images {
        display: grid;
        grid-template-columns: 1fr 2fr;
        column-gap: 3rem;
        margin-bottom: 3rem;
    }

    .lists {
        list-style-type: none;
        /*! "list-style" is shorthand for "list-style-type", "list-style-position" and "list-style-image" */
        margin-top: 2rem;
    }

    .lists li {
        margin-bottom: 1.5rem;
    }

    .list-title,
    .list-subtitle {
        color: #00beef;
    }

    .image-wrapper {
        display: grid;
        grid-template-columns: 2fr 1fr;
        grid-template-rows: repeat(3, min-content);
        /*! the rows will adjust in height based on the content */

        gap: 2rem;
        /*! The "gap" property is a shorthand way to set the value of "column-gap" and "row-gap" at the same time. If given one value, it sets the "column-gap" and "row-gap" both to that value. If given two values, it sets the "row-gap" to the first value and the "column-gap" to the second. */

        place-items: center;
        /*! The "place-items" property can be used to set the "align-items" and "justify-items" values at the same time. The "place-items" property takes one or two values. If one value is provided, it is used for both the "align-items" and "justify-items" properties. If two values are provided, the first value is used for the "align-items" property and the second value is used for the "justify-items" property. */
    }

    .image-1,
    .image-3 {
        grid-column: 1 / -1;
        /*! this will allow the images to span the full width of the grid. */
    }

    @media only screen and (max-width: 720px) {

        .image-wrapper {
            grid-template-columns: 1fr;
        }
    }

    @media only screen and (max-width: 600px) {

        .text-with-images {
            grid-template-columns: 1fr;
        }
    }

    @media only screen and (max-width: 550px) {

        .hero-title {
            font-size: 6rem;
        }

        .hero-subtitle,
        .author,
        .quote,
        .list-title {
            font-size: 1.8rem;
        }

        .social-icons {
            font-size: 2rem;
        }

        .text {
            font-size: 1.6rem;
        }
    }

    @media only screen and (max-width: 420px) {

        .hero-title {
            font-size: 4.5rem;
        }
    }