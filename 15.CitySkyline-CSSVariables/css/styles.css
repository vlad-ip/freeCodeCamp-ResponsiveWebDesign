* {
    box-sizing: border-box;
    /* border: 1px solid black; */
}

:root {
    --building-color1: #aa80ff;
    --building-color2: #66cc99;
    --building-color3: #cc6699;
    --building-color4: #538cc6;
    --window-color1: #bb99ff;
    --window-color2: #8cd9b3;
    --window-color3: #d98cb3;
    --window-color4: #8cb3d9;
    /*! by declaring the variables here, we make their scope Global and thus they can be used anywhere in this document. Variables are primarily used with colors, but they can be given any value and used on any property. */
}

body {
    /*! make <body> fill the whole height of the viewport (it fills the entire width of the viewport by default). */
    height: 100vh;

    /*! we observe that <body>has by default specified "margin: 8px;" >>> remove margins */
    margin: 0;

    /*! set the "overflow" property to "hidden" in order to hide any scroll bars that appear when something extends past the viewport. The scroll bars apear in this case due to the "border" of 1px we specified here, but in other cases the "margin" different than 0 could be the culprit. */
    overflow: hidden;
}

.background-buildings,
.foreground-buildings {
    /*! width: 100%; is the default when we have "position: static;" >>> but NOT anymore after changing it to "position: absolute;" */
    /*! give the element a height of 100% of its parent, which is <body> */
    /*! practically we made this container to have the same width and height as the its parent, which is <body> */
    width: 100%;
    height: 100%;

    position: absolute;
    top: 0;

    display: flex;
    justify-content: space-evenly;
    align-items: flex-end;
}

.building-wrap {
    /*! let's set "display: flex;" for any "container" with this class and "flex-direction: column;". Now we can center the "children" transversally by using "align-items: center" */
    display: flex;
    flex-direction: column;
    align-items: center;
}

.window-wrap {
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;

}

.sky {
    background: radial-gradient(circle closest-corner at 15% 15%, #ffcf33,
            #ffcf33 20%,
            #ffff66 21%,
            #bbeeff 100%);
}

/* BACKGROUND BUILDINGS - "bb" stands for "background building" */
.bb1 {
    width: 10%;
    /*! width: 100%; is default */
    height: 70%;

    /*! create variable with "--varibale-name: value;". You can create a fallback value to a variable with: "var(--variable-name, fallback-value)" */
    /*todo --building-color1: #aa80ff; */
    /* the main advantage of using variables is
        being able to quickly change many values in your stylesheet by just changing the value of a variable. */
    /*todo --building-color2: #66cc99; */
    /*todo --building-color3: #cc6699; */
    /*! these variables declared in ".bb1" are Local and only applie inside it. If you need Global variables you need to declare them in the ":root" selector (this is the highest level selector in CSS. */
    /*todo We will comment the above variables and move them under the ":root" in order to transform them into Global variables. */
}

.bb1-window {
    height: 10%;
    background: linear-gradient(var(--building-color1), var(--window-color1));
}

.bb1a {
    /*! set procentual "width" & "height" in regard to parent */
    width: 70%;
}

.bb1b {
    width: 80%;
}

.bb1c {
    width: 90%;
}

.bb1d {
    /*! width: 100%; is default, but when you set in parent "display: flex;" the "width: ...%;" of the children become proportions/shares they take from the parent "width" as now they are sharing it together, because by default "flex-direction: row;"! We change not to "flow-direction: column;" and the children now share the "height" proportionally to what percentage was set for them! */
    width: 100%;
    height: 70%;

    background: linear-gradient(var(--building-color1) 50%, var(--window-color1))
        /*todo sau echivalentul:
    background: linear-gradient(var(--building-color1) 0% 50%, var(--window-color1) 100%);

    or the colors cut exactly at 50%:
    background: linear-gradient(var(--building-color1) 0% 50%, var(--window-color1) 50% 100%);

    or the colors with 1% gradient between them at 50%:
    background: linear-gradient(var(--building-color1) 0% 50%, var(--window-color1) 51% 100%); */
}

.bb2 {
    width: 10%;
    height: 50%;
    /*! background-color: var(--building-color2, green); >>> fallback color "green" */
}

.bb2a {
    /* margin: auto;
    width: 5vw;
    height: 5vW;
    border-top: 1vw solid #000; */

    /*! make triangled roof out of bottom border */
    border-bottom: 5vh solid var(--building-color2);
    border-left: 5vw solid transparent;
    border-right: 5vw solid transparent;
}

.bb2b {
    width: 100%;
    height: 100%;

    background: repeating-linear-gradient(var(--building-color2) 0%, var(--building-color2) 6%, var(--window-color2) 6%, var(--window-color2) 9%);
}

.bb3 {
    width: 10%;
    height: 55%;
    /* background-color: var(--building-color3, pink); */

    /*! in this case the entire gradient takes up 15% and the first color eat 2/3 of that, thus 10%, because it was specified twice! */
    background: repeating-linear-gradient(90deg, var(--building-color3), var(--building-color3), var(--window-color3) 15%);
}

.bb4 {
    width: 11%;
    height: 58%;
    /* background-color: var(--building-color4, orange); */
}

.bb4a {
    width: 3%;
    height: 10%;
    background-color: var(--building-color4, orange);
}

.bb4b {
    width: 80%;
    height: 5%;
    background-color: var(--building-color4, orange);
}

.bb4c {
    width: 100%;
    height: 85%;
    background-color: var(--building-color4, orange);
}

.bb4-window {
    width: 18%;
    height: 90%;
    background-color: var(--window-color4);
}

/* FOREGROUND BUILDINGS - "fb" stands for "foreground buildings" */
.fb1 {
    width: 10%;
    height: 60%;
}

.fb1a {
    /*! make triangled roof out of bottom border */
    border-bottom: 7vh solid var(--building-color4);
    border-left: 2vw solid transparent;
    border-right: 2vw solid transparent;
}

.fb1b {
    width: 60%;
    height: 10%;
    background-color: var(--building-color4);
}

.fb1c {
    width: 100%;
    height: 80%;

    /*! Overlaping repeating-linear-gradients with transparency (the first one is in front and have transparency to see the second one) in order to obtain visual effects */
    background:
        repeating-linear-gradient(90deg, var(--building-color4)
            /*0%*/
            , var(--building-color4) 10%, transparent 10%, transparent 15%),
        repeating-linear-gradient(var(--building-color4)
            /*0%*/
            , var(--building-color4) 10%, var(--window-color4) 10%, var(--window-color4) 90%);
}

.fb2 {
    width: 10%;
    height: 40%;
}

.fb2a {
    width: 100%;
    border-bottom: 10vh solid var(--building-color3);
    border-left: 1vw solid transparent;
    border-right: 1vw solid transparent;
}

.fb2b {
    width: 100%;
    height: 75%;
    background-color: var(--building-color3);
}

.fb2-window {
    width: 22%;
    height: 100%;
    background-color: var(--window-color3);
}

.fb3 {
    width: 10%;
    height: 35%;
}

.fb3a {
    width: 80%;
    height: 15%;
    background-color: var(--building-color1);
}

.fb3b {
    width: 100%;
    height: 35%;
    background-color: var(--building-color1);
}

.fb3-window {
    width: 25%;
    height: 80%;
    background-color: var(--window-color1);
}

.fb4 {
    width: 8%;
    height: 45%;

    /*! elements with "position: relative;" will always cover elements with "position: static;". Also, elements that come later in the HTML Document will cover the pre-existing elements, being placed on top of them. */
    position: relative;
    left: 10%;
}

.fb4a {
    border-top: 5vh solid transparent;
    border-left: 8vw solid var(--building-color1);
}

.fb4b {
    width: 100%;
    height: 89%;
    background-color: var(--building-color1);

    /*! we want our elliptic windows to wrap, in order to obtain 3 rows of 2 windows */
    display: flex;
    flex-wrap: wrap;
}

.fb4-window {
    width: 30%;
    height: 10%;
    border-radius: 50%;
    background-color: var(--window-color1);
    margin: 10%;
    /*! the 10% margin results if you extract from total width of the building 2 windows of 30% each => 40% divided by 2 margins for each window => margin should be 10% */
}

.fb5 {
    width: 10%;
    height: 33%;

    position: relative;
    right: 10%;

    /*! always put TRANSPARENT FIRST to see through it! */
    background:
        repeating-linear-gradient(var(--building-color2),
            var(--building-color2) 5%,
            transparent 5%,
            transparent 10%),
        repeating-linear-gradient(90deg,
            var(--building-color2),
            var(--building-color2) 12%,
            var(--window-color2) 12%,
            var(--window-color2) 44%);
}

.fb6 {
    width: 9%;
    height: 38%;

    /*! always put TRANSPARENT FIRST to see through it! */
    background:
        repeating-linear-gradient(90deg, var(--building-color3),
            var(--building-color3) 10%,
            transparent 10%,
            transparent 30%),
        repeating-linear-gradient(var(--building-color3),
            var(--building-color3) 10%,
            var(--window-color3) 10%,
            var(--window-color3) 30%);
}

@media (max-width: 1000px) {
    :root {
        --building-color1: #000;
        --building-color2: #000;
        --building-color3: #000;
        --building-color4: #000;
        --window-color1: #777;
        --window-color2: #777;
        --window-color3: #777;
        --window-color4: #777;
    }

    .sky {
        background: radial-gradient(circle closest-corner at 15% 15%, #ccc,
                #ccc 20%,
                #445 21%,
                #223 100%);
    }
}