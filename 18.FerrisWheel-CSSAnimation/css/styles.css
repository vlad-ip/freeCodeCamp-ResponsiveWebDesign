*,
::before,
::after {
    box-sizing: border-box;
    /* margin: 0; */
    padding: 0;
}

.wheel {
    position: absolute;

    width: 55vw;
    max-width: 500px;
    height: 55vw;
    max-height: 500px;

    border: 2px solid black;
    border-radius: 50%;
    margin-left: 50px;

    animation-name: wheel;
    /*! We defined the animation named "wheel" down the page */

    animation-duration: 10s;
    /*! The time for "animation-duration" should be specified in seconds (s) or miliseconds (ms) */

    animation-timing-function: linear;
    /*! The "animation-timing-function" property sets how the animation should progress over time. */

    animation-iteration-count: infinite;
    /*! The "animation-iteration-count" property sets how many times your animation should repeat. This can be set to a number, or to infinite to indefinitely repeat the animation. */
}

.line {
    /*! With "position: absolute;" the element is taken out of the Normal Flow and thus it is not considered anymore as block level element or inline level element => an empty inline element will become visible if it haa "width", "height" and "background"/"border" applied to it. */
    position: absolute;
    top: 50%;
    left: 50%;

    width: 50%;
    /*! of parent */
    height: 2px;
    background-color: black;

    transform-origin: 0% 50%;
    /*! The "transform-origin; OX OY;" property is used to set the point around which a CSS transformation is applied. Here we considered for OY the middle of the height of 2px. */
}

.line:nth-of-type(2) {
    transform: rotate(60deg);
    /*! it works with "transform-origin" */
}

.line:nth-of-type(3) {
    transform: rotate(120deg);
}

.line:nth-of-type(4) {
    transform: rotate(180deg);
}

.line:nth-of-type(5) {
    transform: rotate(240deg);
}

.line:nth-of-type(6) {
    transform: rotate(300deg);
}

.cabin {
    position: absolute;
    border: 2px solid;

    width: 20%;
    height: 20%;
    background-color: red;

    transform-origin: 50% 0%;

    animation: cabins 10s ease-in-out infinite;
    /*! This will set the animation-name animation-duration, animation-timing-function and animation-iteration-count properties in that order. */
    /*! To make your cabin animation seem more like a natural swinging motion, you can use the ease-in-out timing function. This setting will tell the animation to start and end at a slower pace, but move more quickly in the middle of the cycle. */
}

.cabin:nth-of-type(1) {
    top: 50%;
    right: -10%;
}

.cabin:nth-of-type(2) {
    top: 93.5%;
    right: 15%;
}

.cabin:nth-of-type(3) {
    top: 93.5%;
    left: 15%;
}

.cabin:nth-of-type(4) {
    top: 50%;
    left: -10%;
}

.cabin:nth-of-type(5) {
    top: 6.5%;
    left: 15%;
}

.cabin:nth-of-type(6) {
    top: 6.5%;
    right: 15%;
}

/*!!! The @keyframes at-rule is used to define the flow of a CSS animation. Within the @keyframes rule, you can create selectors for specific points in the animation sequence, such as 0% or 25%, or use from and to to define the start and end of the sequence. @keyframes rules require a name to be assigned to them, which you use in other rules to reference. */
@keyframes wheel {
    0% {
        transform: rotate(0deg);
        /*! this will start the animation with no rotation */
    }

    100% {
        transform: rotate(360deg);
        /*! this will stop the animation when the rotation reach 360deg */
    }
}

@keyframes cabins {
    0% {
        transform: rotate(0deg);
    }

    25% {
        background-color: yellow;
    }

    50% {
        background-color: purple;
    }

    75% {
        background-color: yellow;
    }

    100% {
        transform: rotate(-360deg);
    }
}